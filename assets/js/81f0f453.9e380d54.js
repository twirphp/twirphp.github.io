"use strict";(self.webpackChunktwirphp_github_io=self.webpackChunktwirphp_github_io||[]).push([[190],{9032:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return h},toc:function(){return c},default:function(){return p}});var s=r(7462),n=r(3366),i=(r(7294),r(3905)),a=["components"],d={sidebar_position:20},o="Custom HTTP headers",h={unversionedId:"beyond-the-basics/custom-http-headers",id:"beyond-the-basics/custom-http-headers",isDocsHomePage:!1,title:"Custom HTTP headers",description:"Sometimes, you need to send custom HTTP headers.",source:"@site/docs/beyond-the-basics/custom-http-headers.md",sourceDirName:"beyond-the-basics",slug:"/beyond-the-basics/custom-http-headers",permalink:"/docs/beyond-the-basics/custom-http-headers",editUrl:"https://github.com/twirphp/twirphp.github.io/edit/main/docs/beyond-the-basics/custom-http-headers.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"docs",previous:{title:"Serving multiple Twirp services together",permalink:"/docs/beyond-the-basics/multiple-services"}},c=[{value:"Client side",id:"client-side",children:[{value:"Send HTTP Headers in client requests",id:"send-http-headers-in-client-requests",children:[],level:3},{value:"Read HTTP Headers from responses",id:"read-http-headers-from-responses",children:[],level:3}],level:2},{value:"Server side",id:"server-side",children:[{value:"Read HTTP Headers from requests",id:"read-http-headers-from-requests",children:[],level:3}],level:2}],u={toc:c};function p(e){var t=e.components,r=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,s.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-http-headers"},"Custom HTTP headers"),(0,i.kt)("p",null,"Sometimes, you need to send custom HTTP headers."),(0,i.kt)("p",null,"From Twirp\u2019s perspective, \u201cheaders\u201d are just metadata since HTTP is a lower level, transport layer."),(0,i.kt)("h2",{id:"client-side"},"Client side"),(0,i.kt)("h3",{id:"send-http-headers-in-client-requests"},"Send HTTP Headers in client requests"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"\\Twirp\\Context::withHttpRequestHeaders")," from the runtime library to attach a map of headers to the context:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// Given a client ...\n$client = new MyClient($addr);\n\n// Given some headers ...\n$headers = [\n    'Twitch-Authorization' => 'uDRlDxQYbFVXarBvmTncBoWKcZKqrZTY',\n    'Twitch-Client-ID' => 'FrankerZ',\n];\n\n// Attach the headers to a context\n$ctx = [];\n$ctx = \\Twirp\\Context::withHttpRequestHeaders($ctx, $headers);\n\n// And use the context in the request. Headers will be included in the request!\n$resp = $client\u2014>DoRequest($ctx, new Request());\n")),(0,i.kt)("h3",{id:"read-http-headers-from-responses"},"Read HTTP Headers from responses"),(0,i.kt)("p",null,"Twirp client responses are structs that depend only on the protobuf response.\nHTTP headers can not be used by the Twirp client in any way."),(0,i.kt)("p",null,"However, remember that the TwirPHP client is instantiated with a ",(0,i.kt)("a",{parentName:"p",href:"http://www.php-fig.org/psr/psr-18/"},"PSR-18")," HTTP client.\nYou can implement a custom client that captures information coming from headers."),(0,i.kt)("h2",{id:"server-side"},"Server side"),(0,i.kt)("h3",{id:"read-http-headers-from-requests"},"Read HTTP Headers from requests"),(0,i.kt)("p",null,"TwirPHP server methods are abstracted away from HTTP,\ntherefore they don\u2019t have direct access to HTTP Headers."),(0,i.kt)("p",null,"However, they receive the PSR-7 server attributes as the context that\ncan be modified by HTTP middleware before being received by the Twirp method."),(0,i.kt)("p",null,"For example, lets say you want to need the \u2018User-Agent\u2019 HTTP header inside a Twirp call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nfinal class UserAgentMiddleware implements RequestHandlerInterface {\n    // ...\n\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        $request = $request->withAttribute('user-agent', $request->getHeaderLine('User-Agent'));\n\n        return $this->server->handle($request);\n    }\n}\n")))}p.isMDXComponent=!0}}]);