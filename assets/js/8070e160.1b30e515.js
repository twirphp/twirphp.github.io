"use strict";(self.webpackChunktwirphp_github_io=self.webpackChunktwirphp_github_io||[]).push([[651],{390:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return f},default:function(){return y},frontMatter:function(){return k},metadata:function(){return w},toc:function(){return N}});var r=n(7462),a=n(3366),l=n(7294),i=n(3905),o=n(2389),s=n(9443);var p=function(){var e=(0,l.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=n(3039),c=n(6010),d="tabItem_1uMI";function h(e){var t,n,r,a=e.lazy,i=e.block,o=e.defaultValue,s=e.values,h=e.groupId,m=e.className,v=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=s?s:v.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),k=(0,u.lx)(g,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===o?o:null!=(t=null!=o?o:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=v[0])?void 0:r.props.value;if(null!==f&&!g.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=p(),N=w.tabGroupChoices,b=w.setTabGroupChoices,y=(0,l.useState)(f),T=y[0],H=y[1],q=[],C=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var $=N[h];null!=$&&$!==T&&g.some((function(e){return e.value===$}))&&H($)}var x=function(e){var t=e.currentTarget,n=q.indexOf(t),r=g[n].value;r!==T&&(C(t),H(r),null!=h&&b(h,r))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=q.indexOf(e.currentTarget)+1;n=q[r]||q[0];break;case"ArrowLeft":var a=q.indexOf(e.currentTarget)-1;n=q[a]||q[q.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},m)},g.map((function(e){var t=e.value,n=e.label;return l.createElement("li",{role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,className:(0,c.Z)("tabs__item",d,{"tabs__item--active":T===t}),key:t,ref:function(e){return q.push(e)},onKeyDown:P,onFocus:x,onClick:x},null!=n?n:t)}))),a?(0,l.cloneElement)(v.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,o.Z)();return l.createElement(h,(0,r.Z)({key:String(t)},e))}var v=function(e){var t=e.children,n=e.hidden,r=e.className;return l.createElement("div",{role:"tabpanel",hidden:n,className:r},t)},g=["components"],k={sidebar_position:20},f="Quickstart",w={unversionedId:"quickstart",id:"quickstart",isDocsHomePage:!1,title:"Quickstart",description:"This guide walks you through the process of quickly setting up a new project with TwirPHP.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",editUrl:"https://github.com/twirphp/twirphp.github.io/edit/main/docs/quickstart.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"docs",previous:{title:"About",permalink:"/docs/about"}},N=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Set up a new project",id:"set-up-a-new-project",children:[],level:2},{value:"Install the protoc plugin (code generator)",id:"install-the-protoc-plugin-code-generator",children:[],level:2},{value:"Install the runtime library",id:"install-the-runtime-library",children:[],level:2},{value:"Create a new service definition",id:"create-a-new-service-definition",children:[],level:2},{value:"Generate code",id:"generate-code",children:[],level:2},{value:"Implement the service",id:"implement-the-service",children:[],level:2},{value:"Implement the server",id:"implement-the-server",children:[],level:2},{value:"Test the server",id:"test-the-server",children:[],level:2},{value:"Use the generated client stubs",id:"use-the-generated-client-stubs",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],b={toc:N};function y(e){var t=e.components,n=(0,a.Z)(e,g);return(0,i.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart"},"Quickstart"),(0,i.kt)("p",null,"This guide walks you through the process of quickly setting up a new project with TwirPHP."),(0,i.kt)("p",null,"If you want to see the result without following this guide, check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/twirphp/quickstart-demo"},"this repository"),"."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This is merely an overview, it's not meant for setting up new production services."),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Please read the rest of the documentation.")))),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Please install the following components using your preferred method."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.php.net/"},"PHP")," (at least 7.3)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://getcomposer.org/"},"Composer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/protocolbuffers/protobuf#protocol-compiler-installation"},"Protobuf compiler"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Give ",(0,i.kt)("a",{parentName:"p",href:"https://nixos.org/"},"Nix")," a try and install dependencies in seconds."))),(0,i.kt)("h2",{id:"set-up-a-new-project"},"Set up a new project"),(0,i.kt)("p",null,"Create a new project directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir twirphp-quickstart\ncd twirphp-quickstart\n")),(0,i.kt)("p",null,"Initialize Composer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"composer init --name twirp/quickstart-demo --stability dev --autoload src/ --no-interaction\n")),(0,i.kt)("h2",{id:"install-the-protoc-plugin-code-generator"},"Install the protoc plugin (code generator)"),(0,i.kt)("p",null,"The easiest way to install the plugin is with the following script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl -Ls https://git.io/twirphp | bash\n")),(0,i.kt)("p",null,"It will install the plugin in a directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"bin"),"."),(0,i.kt)("p",null,"Alternatively, you can download a prebuilt binary from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/twirphp/twirp/releases"},"releases page"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you use ",(0,i.kt)("a",{parentName:"p",href:"https://nixos.org/"},"Nix"),", just install the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://search.nixos.org/packages?channel=unstable&show=protoc-gen-twirp_php&from=0&size=50&sort=relevance&type=packages&query=protoc"},"protoc-gen-twirp_php"))," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NixOS/nixpkgs"},"nixpkgs"),"."))),(0,i.kt)("h2",{id:"install-the-runtime-library"},"Install the runtime library"),(0,i.kt)("p",null,"Install the runtime library (and the quickstart package) with Composer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"composer require twirp/twirp twirp/quickstart\n")),(0,i.kt)("p",null,"The quickstart package installs some additional dependencies required to run TwirPHP,\nbut for the purposes of this guide, they are not important.\nThey are explained in more detail in the rest of the documentation."),(0,i.kt)("h2",{id:"create-a-new-service-definition"},"Create a new service definition"),(0,i.kt)("p",null,"Create a new service in the repository root:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:'title="service.proto"',title:'"service.proto"'},'syntax = "proto3";\n\npackage twirp.quickstartDemo;\n\nservice HelloWorld {\n  rpc Hello(HelloReq) returns (HelloResp);\n}\n\nmessage HelloReq {\n  string subject = 1;\n}\n\nmessage HelloResp {\n  string text = 1;\n}\n')),(0,i.kt)("h2",{id:"generate-code"},"Generate code"),(0,i.kt)("p",null,"Create a new directory for the generated code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir generated/\n")),(0,i.kt)("p",null,"Run the protobuf compiler. Based on where you installed the plugin,\nyou'll have to run one of the commands below:"),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(v,{value:"apple",label:"Plugin installed in PATH",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"protoc --twirp_php_out=generated/ --php_out=generated/ service.proto\n"))),(0,i.kt)(v,{value:"orange",label:"Plugin installed in bin/",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"protoc --plugin=protoc-gen-twirp_php=bin/protoc-gen-twirp_php --twirp_php_out=generated/ --php_out=generated/ service.proto\n")))),(0,i.kt)("p",null,"Add autoloading configuration for the generated code to ",(0,i.kt)("inlineCode",{parentName:"p"},"composer.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'{6} title="composer.json"',"{6}":!0,title:'"composer.json"'},'{\n    "name": "twirp/quickstart-demo",\n    "autoload": {\n        "psr-4": {\n            "Twirp\\\\QuickstartDemo\\\\": "src/",\n            "": "generated/"\n        }\n    },\n    "minimum-stability": "dev",\n    "require": {\n        "twirp/twirp": "^0.8.0",\n        "twirp/quickstart": "dev-master"\n    }\n}\n')),(0,i.kt)("p",null,"Dump the Composer autoloader after making the above change:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"composer dump-autoload\n")),(0,i.kt)("h2",{id:"implement-the-service"},"Implement the service"),(0,i.kt)("p",null,"Implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"HelloWorld")," service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="src/MyHelloWorld.php"',title:'"src/MyHelloWorld.php"'},'<?php\n\nnamespace Twirp\\QuickstartDemo;\n\nfinal class MyHelloWorld implements HelloWorld\n{\n    public function Hello(array $ctx, HelloReq $req): HelloResp\n    {\n        $resp = new HelloResp();\n        $resp->setText(sprintf("Hello %s", $req->getSubject()));\n\n        return $resp;\n    }\n}\n\n')),(0,i.kt)("h2",{id:"implement-the-server"},"Implement the server"),(0,i.kt)("p",null,"Implement the server and register the ",(0,i.kt)("inlineCode",{parentName:"p"},"MyHelloWorld")," implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"HelloWorld")," service in it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'{9-10} title="server.php"',"{9-10}":!0,title:'"server.php"'},"<?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$request = \\GuzzleHttp\\Psr7\\ServerRequest::fromGlobals();\n\n$server = new \\Twirp\\Server();\n\n$handler = new \\Twirp\\QuickstartDemo\\HelloWorldServer(new \\Twirp\\QuickstartDemo\\MyHelloWorld());\n$server->registerServer(\\Twirp\\QuickstartDemo\\HelloWorldServer::PATH_PREFIX, $handler);\n\n$response = $server->handle($request);\n\nif (!headers_sent()) {\n    // status\n    header(sprintf('HTTP/%s %s %s', $response->getProtocolVersion(), $response->getStatusCode(), $response->getReasonPhrase()), true, $response->getStatusCode());\n    // headers\n    foreach ($response->getHeaders() as $header => $values) {\n        foreach ($values as $value) {\n            header($header.': '.$value, false, $response->getStatusCode());\n        }\n    }\n}\necho $response->getBody();\n")),(0,i.kt)("h2",{id:"test-the-server"},"Test the server"),(0,i.kt)("p",null,"At this point, you can start sending requests to the server."),(0,i.kt)("p",null,"First, launch a PHP server in a new shell:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"php -S 127.0.0.1:8080 server.php\n")),(0,i.kt)("p",null,"Then send an HTTP request to the server using cURL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl http://127.0.0.1:8080/twirp/twirp.quickstartDemo.HelloWorld/Hello \\\n  -X POST \\\n  -H "Content-Type: application/json" \\\n  -d \'{"subject": "World"}\'\n')),(0,i.kt)("p",null,"You should see ",(0,i.kt)("inlineCode",{parentName:"p"},'{"text":"Hello World"}')," as the response."),(0,i.kt)("h2",{id:"use-the-generated-client-stubs"},"Use the generated client stubs"),(0,i.kt)("p",null,"One of the biggest benefits of using a protobuf-based RPC framework is that you don't have to write any client code:\nthe framework generates that for you."),(0,i.kt)("p",null,"Here is an example of using the generated client for calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"HelloWorld")," service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="client.php"',title:'"client.php"'},"<?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$client = new \\Twirp\\QuickstartDemo\\HelloWorldClient($argv[1]);\n\n$req = new \\Twirp\\QuickstartDemo\\HelloReq();\n$req->setSubject(\"World\");\n\ntry {\n    $resp = $client->Hello([], $req);\n\n    echo $resp->getText();\n} catch (\\Twirp\\Error $e) {\n    echo json_encode([\n        'code' => $e->getErrorCode(),\n        'msg' => $e->getMessage(),\n        'meta' => $e->getMetaMap(),\n    ]);\n}\n")),(0,i.kt)("p",null,"Call the server started in the previous step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"php client.php http://127.0.0.1:8080\n")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"In this guide, you have learned how to use the code generator (protobuf plugin) to\ngenerate server code and client stubs from a service defined in protobuf\nand learned how to implement the service and integrate it into standard HTTP tooling."),(0,i.kt)("p",null,"You can read more about each concept presented in this guide in the following sections."))}y.isMDXComponent=!0}}]);